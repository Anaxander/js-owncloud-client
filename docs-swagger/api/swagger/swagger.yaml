swagger: "2.0"
info: 
  version: "10.0.0"
  title: ownCloud documentation
tags: 
  - name: "General"
    description: "Methods like initLibrary, login etc."
      
  - name: "Sharing"
    description: "File/Folder sharing methods"
    
  - name: "Apps Management"
    description: "Methods for Enabling/Disabling/Retrieving apps"
      
  - name: "User Management"
    description: "User Creation/Deletion/Updation methods"
    
  - name: "Group Management"
    description: "Group Creation/Deletion/Updation methods"

host: localhost:8080
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /initLibrary:
    get:
      tags:
        - General
      description: |
        
        ```js
        var owncloud = require('js-owncloud-client');
        
        var oc = new owncloud(instance);
        ```
      summary: Initialize owncloud session
      operationId: initLibrary
      parameters:
        - name: url
          in: query
          description: server URL
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
  
  /login:
    get:
      tags:
        - General
      description: |
        
        ```js
        oc.login(username, password).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      operationId: login
      summary: Logs you in to your specified ownCloud instance
      parameters:
        - name: user
          description: username
          in: query
          type: string
        - name: pass
          description: password
          in: query
          type: string
          format: password
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getApps:
    get:
      tags:
        - Apps Management
      description: |
        
        ```js
        oc.apps.getApps().then(apps => { 
          
          // All Apps

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Get all the enabled and disbaled apps via the Provisioning API
      operationId: getApps
      produces:
      - "application/json"
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /shareFileWithLink:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.shareFileWithLink(path, {
          
          perms: perms, 
          publicUpload: publicUpload, 
          password: password
          
        }).then(share => { 
          
          /* 
            Object of class shareInfo
            Use methods like getId(), getPath(), getLink() etc. 
          */

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Shares a remote file with link
      operationId: shareFileWithLink
      parameters:
        - name: path
          in: query
          description: path of the file to be shared
          type: string
        
        - name: perms
          in: query
          required: false
          description: permission of the shared object defaults to read only (OPTIONAL)
          type: integer
        
        - name: publicUpload
          in: query
          required: false
          description:  allows users to upload files or folders (OPTIONAL)
          type: boolean
        
        - name: password
          in: query
          required: false
          description: sets a password (OPTIONAL)
          type: string
          format: password
      produces:
      - "application/json"
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /updateShare:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.updateShare(shareId, {
          
          perms: perms, 
          publicUpload: publicUpload, 
          password: password
          
        }).then(share => { 
          
          /* 
            Object of class shareInfo
            Use methods like getId(), getPath(), getLink() etc. 
          */

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Updates a given share
      operationId: updateShare
      parameters:
        - name: shareId
          in: query
          description: ID of share to update 
          type: integer
        
        - name: perms
          in: query
          required: false
          description: permission of the shared object defaults to read only (OPTIONAL)
          type: integer
        
        - name: publicUpload
          in: query
          required: false
          description:  allows users to upload files or folders (OPTIONAL)
          type: boolean
        
        - name: password
          in: query
          required: false
          description: sets a password (OPTIONAL)
          type: string
          format: password
      produces:
      - "application/json"
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /shareFileWithUser:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.shareFileWithUser(path, username, {
          
          perms: perms, 
          remoteUser: remoteUser
          
        }).then(share => { 
          
          /* 
            Object of class shareInfo
            Use methods like getId(), getPath(), getLink() etc. 
          */

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Shares a remote file with User
      operationId: shareFileWithUser
      parameters:
        - name: path
          in: query
          description: path of the file to be shared
          type: string
          
        - name: username
          in: query
          description: name of user to be shared with
          type: string
        
        - name: perms
          in: query
          required: false
          description: permission of the shared object defaults to read only (OPTIONAL)
          type: integer
        
        - name: remoteUser
          in: query
          required: false
          description:  allows users to upload files or folders (OPTIONAL)
          type: boolean
      produces:
      - "application/json"
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /shareFileWithGroup:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.shareFileWithGroup(path, groupname, {
          
          perms: perms
          
        }).then(share => { 
          
          /* 
            Object of class shareInfo
            Use methods like getId(), getPath(), getLink() etc. 
          */

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Shares a remote file with Group
      operationId: shareFileWithGroup
      parameters:
        - name: path
          in: query
          description: path of the file to be shared
          type: string
          
        - name: groupName
          in: query
          description: name of group to be shared with
          type: string
        
        - name: perms
          in: query
          required: false
          description: permission of the shared object defaults to read only (OPTIONAL)
          type: integer
      produces:
      - "application/json"
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
  
  /getShares:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.getShares().then(shares => { 
          
          // Array containing all shares

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Returns array of shares
      operationId: getShares
      parameters:
        - name: path
          in: query
          description: path to the share to be checked
          type: string
          
        - name: reshares
          in: query
          required: false
          description: resharing allowed or not
          type: boolean
        
        - name: subfiles
          in: query
          required: false
          description:  returns not only the shares from the current user but all shares from the given file
          type: boolean
        
        - name: shared_with_me
          in: query
          required: false
          description: returns all shares which are shared with me
          type: boolean
      produces:
      - "application/json"
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /isShared:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.isShared(path).then(status => { 
          
          // True if shared

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Checks wether a path is already shared
      operationId: isShared
      parameters:
        - name: path
          description: path to the share to be checked
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getShare:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.getShare(shareId).then(share => { 
          
          /* 
            Object of class shareInfo
            Use methods like getId(), getPath(), getLink() etc. 
          */

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Gets share information about known share
      operationId: getShare
      parameters:
        - name: shareId
          description: ID of the share to be checked
          in: query
          type: number
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /createUser:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.createUser(username, password).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Creates user via the provisioning API
      operationId: createUser
      parameters:
        - name: username
          description: username of the new user to be created
          in: query
          type: string
        - name: password
          description: password of the new user to be created
          in: query
          type: string
          format: password
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /deleteUser:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.deleteUser(username).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Deletes user via the provisioning API
      operationId: deleteUser
      parameters:
        - name: username
          description: username of the user to be deleted
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /searchUsers:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.searchUsers(username).then(users => { 
          
          // Array of all matching usernames

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Searches for users via the provisioning API
      operationId: searchUsers
      parameters:
        - name: username
          description: username of the user to be searched
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /userExists:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.userExists(username).then(status => { 
          
          // True if exists

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Checks a user via the provisioning API
      operationId: userExists
      parameters:
        - name: username
          description: name of user to be checked
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getUsers:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.getUsers().then(users => { 
          
          // Array of all usernames

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Get all users via the Provisioning API
      operationId: getUsers
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /setUserAttribute:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.setUserAttribute(username, key, value).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Sets a user attribute via the Provisioning API
      operationId: setUserAttribute
      parameters:
        - name: username
          description: name of user to modify
          in: query
          type: string
        - name: key
          description: key of the attribute to be set (email, quota, display, password)
          in: query
          type: string
        - name: value
          description: value to be set
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /addUserToGroup:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.addUserToGroup(username, groupName).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Adds user to group via the Provisioning API
      operationId: addUserToGroup
      parameters:
        - name: username
          description: name of user to modify
          in: query
          type: string
        - name: groupName
          description: name of group to add to
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getUserGroups:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.getUserGroups(username).then(status => { 
          
          // Array of all groups user is member of

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Get a list of groups associated to a user via the Provisioning API
      operationId: getUserGroups
      parameters:
        - name: username
          description: name of user to list groups
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /userIsInGroup:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.userIsInGroup(username, groupName).then(status => { 
          
          // True if user is part of group

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Checks if a user is in a group via the Provisioning API
      operationId: userIsInGroup
      parameters:
        - name: username
          description: name of user
          in: query
          type: string
        - name: groupName
          description: name of group
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getUser:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.getUser(username).then(user => { 
          
          // Object of all user details

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Retrieves information about a user via the Provisioning API
      operationId: getUser
      parameters:
        - name: username
          description: name of user to list groups
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /removeUserFromGroup:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.removeUserFromGroup(username, groupName).then(status => { 
          
          // true if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Removes user from a group via the Provisioning API
      operationId: removeUserFromGroup
      parameters:
        - name: username
          description: name of user
          in: query
          type: string
        - name: groupName
          description: name of group
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /addUserToSubadminGroup:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.addUserToSubadminGroup(username, groupName).then(status => { 
          
          // true if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Adds user to a subadmin group via the Provisioning API
      operationId: addUserToSubadminGroup
      parameters:
        - name: username
          description: name of user to modify
          in: query
          type: string
        - name: groupName
          description: name of group to add to
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getUserSubadminGroups:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.getUserSubadminGroups(username).then(groups => { 
          
          // Array of all groups the user is subadmin of

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Get a list of subadmin groups associated to a user via the Provisioning API
      operationId: getUserSubadminGroups
      parameters:
        - name: username
          description: name of user to list groups
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /userIsInSubadminGroup:
    get:
      tags:
        - User Management
      description: |
        
        ```js
        oc.users.userIsInSubadminGroup(username, groupName).then(status => { 
          
          // true if user is a subadmin of the group

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Checks if a user is in a subadmin group via the Provisioning API
      operationId: userIsInSubadminGroup
      parameters:
        - name: username
          description: name of user
          in: query
          type: string
        - name: groupName
          description: name of group
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /createGroup:
    get:
      tags:
        - Group Management
      description: |
        
        ```js
        oc.groups.createGroup(groupName).then(status => { 
          
          // true if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Creates a group via the provisioning API
      operationId: createGroup
      parameters:
        - name: groupName
          description: groupName of the new user to be created
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /deleteGroup:
    get:
      tags:
        - Group Management
      description: |
        
        ```js
        oc.groups.deleteGroup(groupName).then(status => { 
          
          // true if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Deletes a group via the provisioning API
      operationId: deleteGroup
      parameters:
        - name: groupName
          description: Name of the new group to be created
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getGroups:
    get:
      tags:
        - Group Management
      description: |
        
        ```js
        oc.groups.getGroups().then(groups => { 
          
          // Array of all group names

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Gets all groups via the provisioning API
      operationId: getGroups
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getGroupMembers:
    get:
      tags:
        - Group Management
      description: |
        
        ```js
        oc.groups.getGroupMembers(groupName).then(members => { 
          
          // Array of all group members

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Gets all members of a group via the provisioning API
      operationId: getGroupMembers
      parameters:
        - name: groupName
          description: Name of the group to list members
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /groupExists:
    get:
      tags:
        - Group Management
      description: |
        
        ```js
        oc.groups.groupExists(groupName).then(status => { 
          
          // true if exists

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Checks a group via provisioning API
      operationId: groupExists
      parameters:
        - name: groupName
          description: Name of the group to be checked
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getConfig:
    get:
      tags:
        - General
      description: |
        
        ```js
        oc.getConfig().then(config => { 
          
          // object with all config settings of the OC instance

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Returns ownCloud config information
      operationId: getConfig
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getAttribute:
    get:
      tags:
        - Apps Management
      description: |
        
        ```js
        oc.apps.getAttribute(app, key).then(value => { 
          
          // value of the key

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Returns an application attribute
      operationId: getAttribute
      parameters:
        - name: app
          description: application ID
          in: query
          type: string
        - name: key
          description: attribute key or None to retrieve all values for the given application
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /setAttribute:
    get:
      tags:
        - Apps Management
      description: |
        
        ```js
        oc.apps.setAttribute(app, key, value).then(status => { 
          
          // true if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      operationId: setAttribute
      parameters:
        - name: app
          description: application ID
          in: query
          type: string
        - name: key
          description: attribute key or None to set for the given application
          in: query
          type: string
        - name: value
          description: attribute value to set for the given key
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /deleteAttribute:
    get:
      tags:
        - Apps Management
      description: |
        
        ```js
        oc.apps.deleteAttribute(app, key).then(status => { 
          
          // true if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Deletes an application attribute
      operationId: deleteAttribute
      parameters:
        - name: app
          description: application ID
          in: query
          type: string
        - name: key
          description: attribute key or None to set for the given application
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getVersion:
    get:
      tags:
        - General
      description: |
        
        ```js
        oc.getVersion().then(version => { 
          
          // version string of the OC instance

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Gets the ownCloud version of the connected server
      operationId: getVersion
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /getCapabilities:
    get:
      tags:
        - General
      description: |
        
        ```js
        oc.getCapabilities().then(capabilities => { 
          
          // object with all the capabilities of the logged in user

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Gets the ownCloud app capabilities
      operationId: getCapabilities
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /enableApp:
    get:
      tags:
        - Apps Management
      description: |
        
        ```js
        oc.apps.enableApp(appname).then(status => { 
          
          // True if succesful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: enables an app via the Provisioning API
      operationId: enableApp
      parameters:
        - name: appname
          description: name of application to be enabled
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /disableApp:
    get:
      tags:
        - Apps Management
      description: |
        
        ```js
        oc.apps.disbleApp(appname).then(status => { 
          
          // True if succesful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: disables an app via the Provisioning API
      operationId: disableApp
      parameters:
        - name: appname
          description: name of application to be disabled
          in: query
          type: string
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /listOpenRemoteShare:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.listOpenRemoteShare().then(shares => { 
          
          // Array containing all shares

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: List all pending remote share
      operationId: listOpenRemoteShare
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string
                
  /acceptRemoteShare:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.acceptRemoteShare(shareId).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Accepts a remote share
      operationId: acceptRemoteShare
      parameters:
        - name: shareId
          description: ID of share to accept
          in: query
          type: integer
      responses:
        "200":
          description: success
          
  /declineRemoteShare:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.declineRemoteShare(shareId).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Declines a remote share
      operationId: declineRemoteShare
      parameters:
        - name: shareId
          description: ID of share to decline
          in: query
          type: integer
      responses:
        "200":
          description: success
          
  /deleteShare:
    get:
      tags:
        - Sharing
      description: |+
        
        ```js
        oc.shares.deleteShare(shareId).then(status => { 
          
          // True if successful

        }).catch(error => {
          
          // error message
          
        });
        ```
      summary: Unshares a file or directory
      operationId: deleteShare
      parameters:
        - name: shareId
          description: ID of share to delete
          in: query
          type: integer
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              status: 
                type: string